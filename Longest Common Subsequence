#include<stdio.h>
#include<string.h>
#define S 100

char sub[S][S], X[S], Y[S];
int i,j;

int LCS( int m, int n )
{
      int temp[S][S];

      for(i = 0; i <= m; i++)
      {
            temp[i][0] = 0;
      }
      for(i = 0; i <= n; i++)
      {
            temp[0][i] = 0;
      }
      for(i = 1; i <= m; i++)
      {
            for(j = 1; j <= n; j++)
            {
                  if(X[i - 1] == Y[j - 1])
                  {
                        temp[i][j] = temp[i - 1][j - 1] + 1;
                        sub[i][j] = 'c';
                  }
                  else if(temp[i - 1][j] >= temp[i][j - 1])
                  {
                        temp[i][j] = temp[i - 1][j];
                        sub[i][j] = 'u';
                  }
                  else
                  {
                        temp[i][j] = temp[i][j - 1];
                        sub[i][j] = 'l';
                  }
            }
      }
}

void display (int a, int b)
{
      if(a == 0 || b == 0)
      {
            return;
      }
      if(sub[a][b] == 'c')
      {
            display(a - 1, b - 1);
            printf("%c", X[a - 1]);
      }
      else if(sub[a][b] == 'u')
      {
            display(a - 1, b);
      }
      else
      {
            display(a, b - 1);
      }
}

int LCS2( int m, int n )
{
   int L[m+1][n+1];

   for (i=0; i<=m; i++)
   {
     for (j=0; j<=n; j++)
     {
       if (i == 0 || j == 0)
         L[i][j] = 0;

       else if (X[i-1] == Y[j-1])
         L[i][j] = L[i-1][j-1] + 1;

       else
         L[i][j] = max(L[i-1][j], L[i][j-1]);
     }
   }

   return L[m][n];
}


int max(int a, int b)
{
    return (a > b)? a : b;
}

int main()
{

  printf("Enter first sequence of alphabets: \n");
  scanf("%s", X);
  printf("Enter second sequence of alphabets: \n");
  scanf("%s", Y);

  int m = strlen(X);
  int n = strlen(Y);

  printf("The longest common subsequence is ");
  LCS(m,n);
  display(m,n);
  printf(" of length %d", LCS2(m,n));


  return 0;
}
